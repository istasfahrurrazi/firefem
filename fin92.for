*****************************************************************************
*                                                                           *
*      ON THE NAME OF THE GOD, THE MOST GRACIOUS AND THE MOST MERCIFUL      *
*                                                                           *
*****************************************************************************
*                                                                           *
*           FINITE ELEMENT MODELING OF ESTIMATING STRENGTH OF               *
*       ENGINEERING COMPONENT UNDER HIGH TEMPERATURE, TIME DEPENDENT.       *
*                                                                           *
*****************************************************************************
*      PROGRAM FIRESTRUCT                                                   *
*****************************************************************************
*                                                                           *
* FORTRAN COMPILER - MICROSOFT FORTRAN POWERSTATION 4.0                     *
* NOTE :-                                                                   *
* LAST UPDATE = 23/10/97 TIME=21:30 VENUE=FACULTY                           *
* C24-321 (4575),HOUSE 07-5205625                                           *
* DATA FILE ; GLOBAL2D.DAT,DATAF.DAT                                        *
*             CONSTANT.DAT,LOG.DAT                                          *
* ANSWER FILE; NAME SPECIFIED BY THE USER.                                  *
* THE RESULTS (PARAMETER,TEMPERATURE,ELEMENT,NODES) FILE HAS EXTENSION OUT. *
* THE STRENGTH DATAFILE HAS EXTENSION PST.                                  *
* TO GENERATE THE MESH, A SEPARATE PROGRAM WAS DEVELOPED CALLED AUTOMESH.FOR*
*                                                                           *
*****************************************************************************
* NOTATION :
* BC1,BC2,BC3 - VARIABLE FOR BOUNDARY CONDITION VALUE 1 OR 0.
* CLOG - NAME FOR LOG DATA
* CN(1,X) - X-COORDINATE FOR NODE-X
* CN(2,X) - Y-COORDINATE FOR NODE-X
* CTIME1 - COMPUTING TIME (HOURS)
* DELT - TIME STEP IN SECOND
* ELNO - ELEMENT NUMBER
* EPSCON - CONCRETE EMMISIVITY
* EPSFIRE - FIRE EMMISIVITY
* EPSLB - SURFACE EMMISIVITY
* EPSTEL - STEEL EMMISIVITY
* FBC - NODAL LOCATION WHETHER IT IS AT THE BOUNDARY OR NOT (1/0)
* FBN - MODIFIED FG BEFORE SOLVING
* FEH - LOCAL FORCE VECTOR MATRIX 3X1
* FG - GLOBAL FORCE VECTOR (NODE NUM. X 1)
* FT - FIXED TEMPERATURE NODES (1/0)
* HB - CONVECTION COEFFICIENT
* KBN - MODIFIED KG BEFORE SOLVING
* KEH - LOCAL STIFFNESS MATRIX 3X3
* KG - GLOBAL MATRIX (NODE NUM. X NODE NUM.)
* LEG - LEG OF ELEMENT WHETHER IT IS AT THE BOUNDARY OR NOT (1/0)
* MATR - MATERIAL TYPE OF AN ELEMENT
* NNTIME - PRINTING TIME IN SECOND
* NODE - NODE NUMBER
* SIGMAB - STEFAN-BOLTZMANN CONSTANT
* T - THICKNESS OF CROSS SECTION
* TEINIT - INITIAL TEMPERATURE
* TEM - LOCAL NODAL TEMPERATURE
* TEMPI - INITIAL TEMPERATURE
* TEMPT - TO STORE TEMPERATURE VALUE TEMPORARILY
* TF - FIRE TEMPERATURE (DEGRESS CELCIUS)
* TF1 - FIRE TEMPERATURE WHEN FIRST READ FROM GLOBAL2D.DAT
* TIME - TIME IN SECOND
* TIMEM - TIME IN MINUTE
* TIMEH - TIME IN HOUR
* TMPDAY - VARIABLE TO CALL DAY
* TMPHOUR - VARIABLE TO CALL HOUR
* TMPMINUTE - VARIABLE TO CALL MINUTE
* TMPSECOND - VARIABEL TO CALL SECOND
* TMPMONTH - VARIABEL TO CALL MONTH
* TMPYEAR - VARIABLE TO CALL YEAR
* TSOLN - TEMPERATURE VALUE AFTER SOLVING KA=F
*
*
	SUBROUTINE FIN92
C      
      INTEGER*2 TMPDAY, TMPMONTH, TMPYEAR
      INTEGER*2 TMPHOUR, TMPMINUTE, TMPSECOND, TMPHUND
C
C
      CHARACTER*80 CLOG
	CHARACTER*60 REMK
C      
      INTEGER ELX,NDX
      PARAMETER (ELX=1200,NDX=1000) ! ELX- MAX ELEMENT NO., NDX-MAX NODE NO.
      INTEGER BC1,BC2,BC3,FBC(NDX)
	INTEGER ELNO,NODE(3,ELX),LEG(3,ELX),MATR(ELX),FT(NDX)
      DOUBLE PRECISION TF,TEMPT(NDX),TSOLN(NDX),
     .  TEMPI(NDX),KEH(3,3),FEH(3),TEM(3),HB,TIME1,NNTIME,TF1,T,
     .  SIGMAB,EPSLB,CN(2,NDX),KG(NDX,NDX),FG(NDX),KBN(NDX,NDX),LAMW,
     .  DELT,CTIME1,TEINIT,TIMEM,TIMEH,TEMIT(3),TEMIT1(NDX),PHIM(ELX),
     .  YMAX,YMIN,Y,XI,XJ,XK,YI,YJ,YK,SUM,PSTMAX,APPLOAD,CADD,RHOW,
     .  TEMP_EL,DETC,AREA,RHOC,KM,ALPHA,MOIT,AREASTL,AREACON,
     .  STRAINMAX,EO,AXSTRESS,STLAVE,CONAVE,ET,ALFAS,XLOADSTRAIN,
     .  THERMALSTRAIN,STRAIN,FDCO,FPC,DSQ
	double precision timex(1000),firex(1000) 
      CHARACTER*12 ELDATA,COORDAT,TEMPANS,FAVG,FIREDATF
      CHARACTER*1 AN,APY
      CHARACTER IDAT*3,YST*1,PSTFILE*12,OUTF*8,ELES*4,VVG*4
      CHARACTER BLANK*1,PST*4,CRD*4,EDIM*4,DIM*12,STRN*4,STRNN*12,OU*4
      INTEGER LENGTH,FIRST
      PARAMETER (LENGTH=8,BLANK=' ')
      LOGICAL CONVERG
C ***********************************************************      
C NEW DECLARATION     
C ***********************************************************      
      COMMON /DATA/ T,HB,EPSLB,SIGMAB
      COMMON /NAME$/ ELDATA,COORDAT
      COMMON /ELEM/ NODE,CN,NUM,NUMNDE
C
C-*>  READING GLOBAL DATAFILE ********************************
C   T	     - THICKNESS, IN METER
C   DELT   - TIME INTERVAL, IN SECOND
C   HB     - CONVECTION COEFFICIENT
C   EPSLB  - EMMISIVITY
C   NTIME  - NUMBER OF TIME X INTERVAL
C   TEINIT - INITIAL TEMPERATURE IN THE BODY
C
C ************************************************************      
	NAPY=0
      TMPHUND = 0
c      CALL GETDAT(TMPYEAR, TMPMONTH, TMPDAY)
c      CALL GETTIM(TMPHOUR, TMPMINUTE, TMPSECOND, TMPHUND)
C *****************8      
      OPEN(UNIT=1,FILE='LOG.DAT',STATUS='UNKNOWN',IOSTAT=IERR)
	IF(IERR.NE.0) THEN
	PRINT *,'LOG.DAT IS NOT FOUND. PROGRAM STOP'
	STOP
	ENDIF
      DO WHILE(.TRUE.)
      READ(1,'(A80)',END=1) CLOG
      END DO     
1     CLOSE(UNIT=1)
      CALL HEADER
      PRINT 2, 'YOUR LAST ANSWER FILENAME IS : ',CLOG
2     FORMAT(1X,A31,/,1X,60('-'),/,1X,A67,/,1X,60('-'))      
C                                               
      PRINT *,'PLEASE ENTER YOUR ANSWER FILE NAME FOR THIS SESSION, '
      PRINT 3,' WITHOUT EXTENSION :  '
3     FORMAT(A)      
      READ(*,'(A8)') OUTF
      FIRST=1
      PST='.PST'
	STRN='.STN'
	OU='.OUT'
	VVG='.AVG'
      DO NEXT=1,10
	IF(OUTF(NEXT:NEXT).EQ.BLANK) THEN
	    MNEXT=NEXT-1
	    PSTFILE=OUTF(FIRST:MNEXT)//PST
	    STRNN=OUTF(FIRST:MNEXT)//STRN
	    TEMPANS=OUTF(FIRST:MNEXT)//OU
	    FAVG=OUTF(FIRST:MNEXT)//VVG
	    GO TO 4
	ENDIF
      END DO
4     OPEN(UNIT=2,FILE=TEMPANS,STATUS='UNKNOWN') 
     	OPEN(UNIT=7,FILE=STRNN,STATUS='UNKNOWN')
	OPEN(UNIT=4,FILE=FAVG,STATUS='UNKNOWN')
      WRITE(4,*)'-------------------------------------------------'
      WRITE(4,*)'  MINUTE FIRE-C AVE.   MAX.  NODE  MIN. NODE   DIFF'
      WRITE(4,*)'-------------------------------------------------'

	WRITE(7,*) 'TIME AND STRAIN'
	CLOSE(UNIT=7)
C
88    OPEN(UNIT=3,FILE='DATAF.DAT',STATUS='UNKNOWN',IOSTAT=IERR)
	IF(IERR.NE.0) THEN
	PRINT *,'DATAF.DAT IS NOT FOUND. PROGRAM STOP'
	STOP
	ENDIF
      READ(3,'(A12)',END=89) ELDATA
      READ(3,'(A12)') COORDAT                      
      CLOSE(UNIT=3)
	GOTO 90
89	CLOSE(UNIT=3)
	OPEN(UNIT=3,FILE='DATAF.DAT',STATUS='UNKNOWN',IOSTAT=IERR) 
      WRITE(3,*) 'TRY.ELE'
	WRITE(3,*) 'TRY.CRD'
	CLOSE(UNIT=3)
	GOTO 88
90    WRITE(2,*) 'THIS ANSWER FILENAME IS :',TEMPANS
      WRITE(2,*) 'THE STRENGTH FILE IS :',PSTFILE
      WRITE(2,*) 'HOURS -',TMPHOUR,TMPMINUTE
      WRITE(2,*) 'DATE  -',TMPDAY,TMPMONTH,TMPYEAR
C READING THE GLOBAL DATAFILE
      CALL DATGBL(T,DELT,HB,EPSLB,CTIME1,TEINIT,NNTIME,TF1,APPLOAD,
     .            MOIT)
C WRITING THESE DATA INTO THE EXTERNAL ANSWER FILE.      
      WRITE(2,5) 'THICKNESS,m                =',T
      WRITE(2,5) 'TIME STEP SECONDS          =',DELT
      WRITE(2,5) 'CONVECTIVE COEFF           =',HB
      WRITE(2,5) 'EMMISSIVITY (0 - 1)        =',EPSLB
      WRITE(2,5) 'DURATION,HOURS             =',CTIME1
      WRITE(2,5) 'INITIAL TEMPERATURE,DEG.CEL=',TEINIT
      WRITE(2,5) 'PRINT EVERY X SECONDS      =',NNTIME
      WRITE(2,5) 'FIRE TEMPERATURE,0=FORMULA =',TF1
      WRITE(2,5) 'APPLIED LOAD (NEWTON)      =',APPLOAD
      WRITE(2,5) 'MOISTURE CONTENT (%)       =',MOIT  
C TO BE PRINTED ON-SCREEN !           
      PRINT *,'-----------------------------------------------------'
      PRINT *,' THE GLOBAL INFORMATION'
      PRINT *,'-----------------------------------------------------'
      WRITE(*,5) '1.THICKNESS,m                =',T
      WRITE(*,5) '2.TIME STEP SECONDS          =',DELT
      WRITE(*,5) '3.CONVECTIVE COEFF           =',HB
      WRITE(*,5) '4.EMMISSIVITY (0-1)          =',EPSLB
      WRITE(*,5) '5.DURATION,HOURS             =',CTIME1
      WRITE(*,5) '6.INITIAL TEMPERATURE,DEG.CEL=',TEINIT
      WRITE(*,5) '7.PRINT EVERY X SECONDS      =',NNTIME
      WRITE(*,5) '8.FIRE TEMPERATURE,0=FORMULA =',TF1
      WRITE(*,5) '  1= INTERPOLATION(FIRE.DAT) '
      WRITE(*,*) '     PUT YOUR FIRE DATA IN THAT FILE'
      WRITE(*,*) '     TIME IN SEC AND TEMP OF FIRE IN DEG.CEL.'
      WRITE(*,5) '  2= FIRE CURVE 1'
      WRITE(*,5) '  3= FIRE CURVE 2'
      WRITE(*,5) '9.APPLIED LOAD (NEWTON)      =',APPLOAD
      WRITE(*,5) '10.MOISTURE CONTENT (%)      =',MOIT  
5     FORMAT(1X,A28,1X,F15.5)   
      PRINT *,'-----------------------------------------------------'
24    PRINT 6, ' Select parameter to change (0 if nothing to change):'
      READ(*,*) NIGB
      IF(NIGB.EQ.1) THEN
      PRINT 6, ' THICKNESS (M) :'
      READ(*,*) T
	GOTO 24
	ELSEIF(NIGB.EQ.2) THEN
      PRINT 6, ' TIME STEP (SECONDS) :'
      READ(*,*) DELT
	GOTO 24
	ELSEIF(NIGB.EQ.3) THEN
      PRINT 6, ' CONVECTIVE COEFF. :'
      READ(*,*) HB
	GOTO 24
	ELSEIF(NIGB.EQ.4) THEN
34    PRINT 6, ' EMMISIVITY (VALUE BETWEEN 0 AND 1):'
      READ(*,*) EPSLB
	IF(EPSLB.GT.1.OR.EPSLB.LT.0.001) THEN
	PRINT *,'VALUE INCORRECT' 
      GOTO 34
	ENDIF
	GOTO 24
	ELSEIF(NIGB.EQ.5) THEN
      PRINT 6, ' DURATION (HOURS) :'
      READ(*,*) CTIME1
	GOTO 24
	ELSEIF(NIGB.EQ.6) THEN
      PRINT 6, ' INITIAL TEMPERATURE, (DEG. C) :'
      READ(*,*) TEINIT
	GOTO 24
	ELSEIF(NIGB.EQ.7) THEN
      PRINT 6, ' PRINT AT EVERY X SECOND :'
      READ(*,*) NNTIME
	GOTO 24
	ELSEIF(NIGB.EQ.8) THEN
      PRINT 6, ' FIRE TEMPERATURE, 0 = USING ASTM-E119 :'
      READ(*,*) TF1
	GOTO 24
	ELSEIF(NIGB.EQ.9) THEN
      PRINT 6, ' APPLIED LOAD (NEWTON) :'
      READ(*,*) APPLOAD
	GOTO 24
	ELSEIF(NIGB.EQ.10) THEN
      PRINT 6, ' MOISTURE CONTENT (%) :'
      READ(*,*) MOIT
	GOTO 24
	ELSEIF(NIGB.EQ.0) THEN
	GOTO 26
	ELSE
	GOTO 24
      ENDIF
C
26    CONTINUE
      PRINT *,'-----------------------------------------------------'
      PRINT *,' THE UPDATED GLOBAL INFORMATION'
      PRINT *,'-----------------------------------------------------'
      WRITE(*,5) '1.THICKNESS,m                =',T
      WRITE(*,5) '2.TIME STEP SECONDS          =',DELT
      WRITE(*,5) '3.CONVECTIVE COEFF           =',HB
      WRITE(*,5) '4.EMMISSIVITY                =',EPSLB
      WRITE(*,5) '5.DURATION,HOURS             =',CTIME1
      WRITE(*,5) '6.INITIAL TEMPERATURE,DEG.CEL=',TEINIT
      WRITE(*,5) '7.PRINT EVERY X SECONDS      =',NNTIME
      WRITE(*,5) '8.FIRE TEMPERATURE,0=FORMULA =',TF1
      WRITE(*,5) '9.APPLIED LOAD (NEWTON)      =',APPLOAD
      WRITE(*,5) '10.MOISTURE CONTENT (%)      =',MOIT  
      PRINT *,'-----------------------------------------------------'
C SAVE TO FILE GLOBAL2D.DAT
      OPEN(UNIT=9,FILE='GLOBAL2D.DAT',STATUS='UNKNOWN')      
      WRITE(9,*) 'GLOBAL INFORMATION DATA USED TO RUN THE PROGRAM'
      WRITE(9,*) '-----------------------------------------------'
      WRITE(9,25) 'THICKNESS,m                    =',T
      WRITE(9,25) 'TIME INTERVAL IN SECONDS       =',DELT
      WRITE(9,25) 'CONVECTIVE HEAT TRANS COEFF-NT =',HB
      WRITE(9,25) 'EPSILONB (EMMISIVITY)          =',EPSLB
      WRITE(9,25) 'TIME IN HOURS ,MAXIMUM         =',CTIME1
      WRITE(9,25) 'INITIAL TEMPERATURE (CELCIUS)  =',TEINIT
      WRITE(9,25) 'PRINT RESULTS IN EVERY X SECS  =',NNTIME
      WRITE(9,25) 'FIRE TEMPERATURE (IF 0. USE TF)=',TF1
      WRITE(9,25) 'APPLIED LOAD (NEWTON)          =',APPLOAD
      WRITE(9,25) 'MOISTURE CONTENT (%)           =',MOIT
25    FORMAT(1X,A,F30.10)      
      CLOSE(UNIT=9)
      write(*,*) '--> NEW PARAMETER SAVED,PRESS ENTER TO CONTINUE'

C CHANGING THE MOISTURE FROM PERCENT TO ACTUAL FRACTION.
	MOIT=MOIT/100.0D0
C CONDITION THAT IS NOT BEING MET WILL RESULTING THE PROGRAM WILL STOP
C OR PAUSE.
      IF(DELT.EQ.0.0) THEN
      PRINT *,'TIME INTERVAL MUST NOT BE ZERO !'
      STOP
      ENDIF
      IF(T.EQ.0.0) THEN
      PRINT *,'THICKNESS MUST NOT BE ZERO !'
      STOP
      ENDIF
      IF(CTIME1.EQ.0.0) THEN
      PRINT *,'MAXIMUM TIME -> CTIME1 <- MUST NOT BE ZERO !'
      STOP
      ENDIF
      IF(MOIT.GT.0.40) THEN
      PRINT *,'MOISTURE CONTENT TOO HIGH, SHOULD BE LESS THAN 40%'
      PRINT *,'THE AVERAGE VALUE SHOULD BE 5-15%'
      WRITE(*,*) 'PRESS ENTER TO CONTINUE'
      ENDIF
      IF(EPSLB.EQ.0.0) THEN
      PRINT *,'NO HEAT WILL ENTER THE COLUMN DUE TO ZERO EMMISIVITY'
      WRITE(*,*) 'PRESS ENTER TO CONTINUE'
      ENDIF
C
C	PRINT *,MOIT
C	PAUSE 'MOIT'
C      
191   CALL HEADER2
      PRINT * ,'THE CURRENT FILES ARE ',ELDATA,' AND ',COORDAT,'.'
      PRINT 6 ,' ENTER YOUR SELECTION -<ENTER> TO USE CURRENT FILES-:'
6     FORMAT(A)
      READ (*,'(A3)') IDAT 
      IF(IDAT.EQ.' ') IDAT='2'
C ENTERING THE BRAND NEW DATAFILE....      
      IF(IDAT.EQ.'1') THEN
       PRINT *, 'ELEMENT DATA FILE HAS EXTENSION ELE, AND'
       PRINT *, 'COORDINATE DATA FILE HAS EXTENSION CRD.'
       PRINT *, 'THE NAME SHOULD FOLLOW THE MS-DOS CONVENTION !'
       PRINT *, '--------------------------------------------------'
       PRINT 6, ' ENTER NEW ELEMENT DATAFILE (NO EXTENSION)   :'
       READ (*,'(A12)') ELDATA
       PRINT *, '--------------------------------------------------'
      FIRST=1
	ELES='.ELE'
      CRD='.CRD'
      EDIM='.DIM'
      DO NEXT=1,10
	IF(ELDATA(NEXT:NEXT).EQ.BLANK) THEN
	    MNEXT=NEXT-1
	    COORDAT=ELDATA(FIRST:MNEXT)//CRD
	    DIM=ELDATA(FIRST:MNEXT)//EDIM
	    ELDATA=ELDATA(FIRST:MNEXT)//ELES
	    GO TO 7
	ENDIF
      END DO
7      PRINT *,'THE COORDINATE DATAFILE IS ',COORDAT
       PRINT *, '--------------------------------------------------'
       PRINT 6, ' SAVE THIS FILE FOR FUTURE USE? (Y/N) : '
       READ (*,'(A1)') AN
       IF(AN.EQ.'Y'.OR.AN.EQ.'y') THEN
         OPEN(UNIT=3,FILE='DATAF.DAT',STATUS='UNKNOWN')
         WRITE(3,'(A12)') ELDATA
         WRITE(3,'(A12)') COORDAT
         PRINT *, 'THE INFORMATION IS SAVED IN DATAF.DAT'
         CLOSE(UNIT=3)
       ELSE
         PRINT *, 'CURRENT FILE NOT SAVE FOR FUTURE USE.'
       ENDIF
C      
      ELSEIF(IDAT.EQ.'2') THEN
C THIS IS THE DEFAULT FILE NAME, YOU MAY CHANGE IT'S CONTENT ACCORDING
C TO YOUR REQUIREMENTS.
       PRINT *, 'USING THE PREVIOUS SAVED DATAFILE !'
       OPEN(UNIT=3,FILE='DATAF.DAT',STATUS='UNKNOWN')
       READ(3,'(A12)') ELDATA
       READ(3,'(A12)') COORDAT
       CLOSE(UNIT=3)   
       EDIM='.DIM'
       DO NEXT=1,11
	    IF(ELDATA(NEXT:NEXT).EQ.BLANK) THEN
	    MNEXT=NEXT-1
	    DIM=ELDATA(FIRST:MNEXT)//EDIM
	    GO TO 8
	    ENDIF
       END DO      
8      CONTINUE      
       ELSE
       PRINT *,'YOU HAVE TYPED WRONGLY, JUST 1 OR 2 OR 3, NOTHING ELSE.'
       WRITE(*,*) 'enter'
       GO TO 191
      ENDIF                     
C FOR MODIFIED FIRE TEMPERATURE FILE

      IF(TF1.EQ.1.0) THEN ! USING INTERPOLATION
	PRINT*, 'ENTER FIRE DATA FILENAME (USING DOS CONVENTION) :'
	READ(*,'(A12)') FIREDATF
	IF(FIREDATF.EQ.' ') THEN
	FIREDATF='FIRE.DAT'
	ENDIF
	open(unit=15,file=FIREDATF,status='old')

		do ijj=1,500
		read(15,*,end=99) timex(ijj),firex(ijj)
		print*, timex(ijj),firex(ijj)
		end do

99	imax=ijj
	close(unit=15)
	WRITE(*,*)

	ENDIF

C LOG.DAT IS USED TO STORE THE HISTORY OF THE PROGRAM RAN.      
      OPEN(UNIT=1,FILE='LOG.DAT',ACCESS='APPEND',STATUS='OLD')
	PRINT *,'--------------------------------------------------'
	PRINT *,'ENTER YOUR REMARKS FOR THIS ANALYSIS'
	PRINT *,'YOUR REMARKS IS STORED IN LOG.DAT :'
	READ(*,'(A60)') REMK
      WRITE(1,9) TEMPANS,TMPHOUR, TMPMINUTE, TMPDAY,TMPMONTH,TMPYEAR,
     .           ELDATA,COORDAT,REMK
9     FORMAT(1X,A12,1X,I2,':',I2,2X,I2,'-',I2,'-',I4,1X,A12,1X,A12,A)
      CLOSE(UNIT=1)
C      
      WRITE(2,*) 'FILENAME OF ELEMENT :',ELDATA
      WRITE(2,*) 'FILENAME OF COORDNT :',COORDAT                       
C
      PRINT *,'ANSWER FILE TEMPERATURE DISTRIBUTION -' ,TEMPANS
C-*> CONSTANTS VALUES USED IN THE PROGRAM
	LAMW=2.3D06
	RHOW=958.0D0
	SIGMAB=5.67D-08
      WRITE(2,*) 'STEFAN-BOLTZMANN CONSTANT  :',SIGMAB
C-*> CALCULATE THE ELEMENT NUMBER
      CALL ELENUM(NUM,IBW)
      PRINT *,'NUMBER OF ELEMENT =',NUM
      WRITE (2,*) 'NUMBER OF ELEMENT =',NUM
	IF(NUM.GT.ELX) THEN
	PRINT *,'ELEMENT NUMBER GREATER THAN 1200'
	STOP
	ENDIF
C-*> CALCULATE THE NUMBER OF NODE
      CALL CALC(NUMNDE)
      PRINT *,'NUMBER OF NODES   =',NUMNDE
      WRITE (2,*) 'NUMBER OF NODES   =',NUMNDE
	IF(NUMNDE.GT.NDX) THEN
	PRINT *,'NODE NUMBER GREATER THAN 1000'
	STOP
	ENDIF
C-*> READ THE ELEMENT DATA AND THE COORDINATE DATA.
      PRINT *, "ELDATA=",ELDATA
      OPEN(UNIT=9,FILE=ELDATA,STATUS='OLD')
      WRITE(2,*) 'THE ELEMENT DATA'
      NBW=0
      DO N1=1,NUM
      ELNO=N1
	READ(9,*) ELNO,NODE(1,ELNO),NODE(2,ELNO),NODE(3,ELNO),LEG(1,
     .ELNO),LEG(2,ELNO),LEG(3,ELNO),MATR(ELNO)
C CALCULATING THE BANDWIDTH       
      NBW1=ABS(NODE(1,ELNO)-NODE(2,ELNO))+1
      NBW2=ABS(NODE(2,ELNO)-NODE(3,ELNO))+1
      NBW3=ABS(NODE(3,ELNO)-NODE(1,ELNO))+1
      IF(NBW1.GT.NBW) THEN
      NBW=NBW1
      NBEL=ELNO
      ENDIF
      IF(NBW2.GT.NBW) THEN
      NBW=NBW2
      NBEL=ELNO
      ENDIF
      IF(NBW3.GT.NBW) THEN
      NBW=NBW3
      NBEL=ELNO
      ENDIF
      END DO
      CLOSE(UNIT=9)
      PRINT * ,'  '
      PRINT * ,'  '
      PRINT * ,'HALF-BANDWIDTH IS :',NBW
      PRINT * ,'AT ELEMENT        :',NBEL
      PRINT * ,'  '
C READ THE COORDINATE DATA         
      PRINT *, "OPEN COORDAT = ",COORDAT
      OPEN(UNIT=8,FILE=COORDAT,STATUS='OLD')
		WRITE(*,*) "TEST OK...."
	   WRITE(2,*) 'THE COORDINATE DATA'
      DO NCOORD=1,NUMNDE
       READ(8,*) NDUM,CN(1,NCOORD),CN(2,NCOORD),FT(NCOORD),FBC(NCOORD)
	   END DO
	   CLOSE(UNIT=8)
C CALCULATE THE STEEL AND CONCRETE AREA (FOR USE IN STRAIN ANALYSIS)	
	   AREASTL=0.0D0
	   AREACON=0.0D0
	  DO IMS=1,NUM
       I=NODE(1,IMS)
       J=NODE(2,IMS)
       K=NODE(3,IMS)
       XI=CN(1,I)
       YI=CN(2,I)
       XJ=CN(1,J)
       YJ=CN(2,J)
       XK=CN(1,K)
       YK=CN(2,K)
       CALL DETERM(XI,XJ,XK,YI,YJ,YK,DETC,IMS)
	   AREA=DETC/2.0D0
	   IF(MATR(IMS).EQ.1) AREACON=AREA+AREACON
	   IF(MATR(IMS).EQ.2) AREASTL=AREA+AREASTL
	   END DO
	   AREASTL=AREASTL*4.0D0
	   AREACON=AREACON*4.0D0
	   PRINT 27,' 1. STEEL AREA IS ,SQ. M    =',AREASTL
	   PRINT 27,' 2. CONCRETE AREA IS, SQ. M =',AREACON
27	   FORMAT(A,F10.6)
C &*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*
      WRITE(*,*) 'PRESS ENTER'
      PRINT *, '--------------------------------------------'
      PRINT 6, ' DO YOU WANT TO CALCULATE THE STRENGTH (Y/N) : '
      READ(*,'(A1)') YST
      PRINT *, '--------------------------------------------'
      IF(YST.EQ.'Y'.OR.YST.EQ.'y') THEN
      PRINT *, '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
      PRINT *, 'THE STRENGTH INFORMATION IS SAVED IN:',PSTFILE
      PRINT *, '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
      ELSE
      PRINT *, '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
      PRINT *, 'THE COLUMN''S STRENGTH IS NOT CALCULATED.' 
      PRINT *, '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
      ENDIF
      WRITE(*,*) 'PRESS ENTER TO CONTINUE'
C-*> SET INITIAL TEMPERATURE OF THE STRUCTURE, I.E. 20.0 DEGREES
      WRITE(2,*) 'FIRE  &  TIME  &  NODE  &  TEMP. NEW  &   TEMP. OLD'
      DO 10 MB=1,NUMNDE
      TEMPI(MB)=TEINIT
      TEMIT1=TEINIT
10    TEMPT(MB)=TEINIT
C SETTING THE INITIAL MOISTURE VALUE
      DO IMSS=1,NUM
	PHIM(IMSS)=MOIT
	END DO
C-*> SET THE TIME TO BE ZERO AND STRENGTH PARAMETERS
      YMAX = 0.000001D0      ! FOR STRENGTH
      YMIN = 0.000001D0      ! FOR STRENGTH
      Y    = 0.000001D0      ! FOR STRENGTH
      TIME1 = 0.0D0           ! SETTING TIME TO ZERO VALUE.
C-*> SET THE TIME DURATION FOR PRINTING.
C PRINT EVERY X SECONDS (VALUES ALWAYS INTEGER) :- NNTIME (SECONDS)
      IF(NNTIME.LT.DELT) THEN
      PRINT *,'CANNOT PRINT DATA ! SET NEW NNTIME IN GLOBAL2D.DAT'
      PRINT *,'NNTIME SHOULD HAVE VALUE NO LESS THAN DELT! '
      STOP
      ENDIF
      A=NNTIME/DELT
      NCOUNT=INT(A)      
      NCOUST=NCOUNT
      NPRINT=0 
      NSTP=0
      TIMEH=0.0D0 
      IF(YST.EQ.'Y'.OR.YST.EQ.'y') THEN
      OPEN(UNIT=12,FILE=PSTFILE,STATUS='UNKNOWN')
      WRITE(12,*) '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
      WRITE(12,*) '   THE TIME AND THE STRENGTH OF THE COLUMN'
      WRITE(12,*) '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
      WRITE(12,*) '                         FIRE        AVERAGE'
      WRITE(12,*) ' TIME     STRENGTH    TEMPERATURE  TEMPERATURE'
      WRITE(12,*) ' (MIN)    (NEWTON)     (CELCIUS)    (CELCIUS)'
      WRITE(12,*) '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
      CLOSE(UNIT=12)
      ENDIF
      NPTIME=0
      PRINT *,'-------------------------------------------------------'
      PRINT *,'  MINUTE FIRE-C AVE.   MAX.  NODE  MIN. NODE   DIFF'
      PRINT *,'-------------------------------------------------------'
C-*> TIME LOOPS STARTING, HERE
C %^%^%^%^%^%^%^%^%^&&&&&&&&&&&&&^%^%^%^%^%^%^%^%
C TIME IN SECONDS (TIMEM-MINUTES AND TIMEH-HOURS)
C %^%^%^%^%^%^%^%^%^&&&&&&&&&&&&&^%^%^%^%^%^%^%^%
11	IF(TIMEH.GT.CTIME1) THEN
      PRINT *,'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
      PRINT *,'THE CALCULATION IS SUPPOSED TO END BUT IF YOU WANT TO'
      PRINT *,'CONTINUE CALCULATING PLEASE ENTER ADDITIONAL HOUR BELOW'
      PRINT *,'AND PLEASE PUT 0 (ZERO) IF YOU WISH TO END.'
      PRINT *,'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
      PRINT 6,' ENTER THE ADDITIONAL HOUR HERE OR [0 (ZERO) TO STOP]:'
      READ(5,*) CADD
      IF(CADD.EQ.0.0D0) GOTO 21
      CTIME1=CTIME1+CADD
      ENDIF
	TIMEM=TIME1/60.0D0
	TIMEH=TIME1/3600.0D0
C	
      IF(NPTIME.EQ.22) THEN  
      PRINT *,'-------------------------------------------------------'
	PRINT *,'  YOUR OUTPUT FILENAME IS ',TEMPANS
      PRINT *,'  MINUTE FIRE-C AVE.   MAX.  NODE  MIN. NODE   DIFF'
      PRINT *,'-------------------------------------------------------'
      NPTIME=0
      ELSE
      NPTIME=NPTIME+1
      ENDIF 
C-*> SET THE FIRE TEMPERATURE AT TIME, T=TIME
      IF(TF1.LE.0.0001D0) THEN

	TF=20.D0+750.D0*(1.0D0-DEXP(-3.79553D0*DSQRT(TIMEH)))
     .	   +170.41D0*DSQRT(TIMEH)
C	TF = -4.8925*timeh**6 + 81.311*timeh**5 - 525.85*timeh**4 
C	.     + 1666*timeh**3 - 2670.9*timeh**2 +  2047.6*timeh + 75.461
      ELSEIF(TF1.EQ.1.0) THEN ! USING INTERPOLATION
C	print*,'time at fin92=',time
      CALL TEMPRO(TIME1,TF,TIMEX,FIREX,IMAX)
C
	ELSEIF(TF1.EQ.2.0) THEN ! FIRE CURVE 1
	TF=-1.0D-09*(TIMEH*60.0D0)**6 + 6.0D-07*(TIMEH*60.0D0)**5 - 
     .    0.0002D0*(TIMEH*60.0D0)**4 + 
     .    0.0204D0*(TIMEH*60.0D0)**3 - 1.6097D0*(TIMEH*60.0D0)**2 + 
     .    70.251D0*(TIMEH*60.0D0) - 63.473D0
	ELSEIF(TF1.EQ.3.0) THEN ! FIRE CURVE 2
	TF= -1D-09*(TIMEH*60.0D0)**6 + 8D-07*(TIMEH*60.0D0)**5 - 
     . 0.0003D0*(TIMEH*60.0D0)**4 + 0.0379D0*(TIMEH*60.0D0)**3 - 
     . 2.8418D0*(TIMEH*60.0D0)**2 + 85.748D0*(TIMEH*60.0D0) 
     . + 22.977
	ELSE
      TF=TF1        ! TO USE THE GIVEN FIXED TEMPERATURE
      ENDIF
	IF(TF.LT.20.0D0) THEN
	PRINT *,'FIRE TEMPERATURE IS BELOW 20 DEGREES, PROGRAM STOP'
	GOTO 21
	ENDIF
C-*> BEGIN CALCULATING THE ELEMENTWISE STIFFNESS MATRIX AND FORCE VECTOR
C    SET THE GLOBAL MATRIX TO NULL
C ITERATION STARTS HERE !
      ITER=0
C STARTING THE ELEMENTWISE CALCULATIONS.
C SET THE GLOBAL MATRIX TO BE ZERO.
12    DO IZ=1,NUMNDE
      DO JZ=1,NUMNDE
      KG(IZ,JZ)=0.0D0
      END DO
      FG(IZ)=0.0D0
      END DO         
C-*> READING THE MATERIAL DATAFILE,TEMPCEN=TEMPERATURE-CENTER-POINT
      DO 13 ELNO=1,NUM            
      I=NODE(1,ELNO)
      J=NODE(2,ELNO)
      K=NODE(3,ELNO)
      BC1=LEG(1,ELNO)
      BC2=LEG(2,ELNO)
      BC3=LEG(3,ELNO)
      MAT=MATR(ELNO)
      XI=CN(1,I)
      YI=CN(2,I)
      XJ=CN(1,J)
      YJ=CN(2,J)
      XK=CN(1,K)
      YK=CN(2,K)
C 'TEM'S ARE THE CURRENT TEMPERATURE OF THE NODE
	TEM(1)=TEMPI(NODE(1,ELNO))
	TEM(2)=TEMPI(NODE(2,ELNO))
	TEM(3)=TEMPI(NODE(3,ELNO))
	TEMIT(1)=TEMIT1(NODE(1,ELNO))
	TEMIT(2)=TEMIT1(NODE(2,ELNO))
	TEMIT(3)=TEMIT1(NODE(3,ELNO))
C CALLING THE TRIANGULAR SUBROUTINE
	CALL TRIANG(ELNO,XI,YI,XJ,YJ,XK,YK,KEH,FEH,TEMIT,TEM,I,J,K,
     .BC1,BC2,BC3,MAT,TF,DELT)     
C-*> TO WRITE THE RESULT OF STIFFNESS AND FORCE MATRIX INTO GLOBAL MATRIX
	KG(I,I)=KEH(1,1)+KG(I,I)
	KG(I,J)=KEH(1,2)+KG(I,J)
	KG(I,K)=KEH(1,3)+KG(I,K)
	KG(J,I)=KEH(2,1)+KG(J,I)
	KG(J,J)=KEH(2,2)+KG(J,J)
	KG(J,K)=KEH(2,3)+KG(J,K)
	KG(K,I)=KEH(3,1)+KG(K,I)
	KG(K,J)=KEH(3,2)+KG(K,J)
	KG(K,K)=KEH(3,3)+KG(K,K)
	FG(I)=FEH(1)+FG(I)
	FG(J)=FEH(2)+FG(J)
	FG(K)=FEH(3)+FG(K)	             
13	CONTINUE            
C
C ***************************************************************
C-*> END OF ELEMENTWISE CALCULATION AND GLOBAL CALCULATION BEGIN.
C ***************************************************************
C
C ******************************************	
C TO CHANGE THE STIFFNESS INTO BANDED MATRIX
C ******************************************	
      DO IBN=1,NUMNDE
       DO JBN=1,NBW
        KBN(IBN,JBN)=KG(IBN,IBN+JBN-1)
       END DO
      END DO          
C THE SOLVING PART IS BY USING THE BANDED-MATRIX TO REDUCE TIME AND 
C COMPUTING LOAD/MEMORY.
      NUMD=NUMNDE-1
      DO 15 ISG=1,NUMD
      MJ=ISG+NBW-1
      IF(MJ.GT.NUMNDE) MJ=NUMNDE
      NJ=ISG+1
      MK=NBW
      IF((NUMNDE-ISG+1).LT.NBW) MK=NUMNDE-ISG+1
      ND=0
      DO 14 JSG=NJ,MJ
      MK=MK-1
      ND=ND+1
      NL=ND+1
      DO 14 KSG=1,MK
      NK=ND+KSG
14    KBN(JSG,KSG)=KBN(JSG,KSG)-KBN(ISG,NL)*KBN(ISG,NK)/KBN(ISG,1)
15    CONTINUE
C
      DO 16 ICF=1,NUMD
      MJ=ICF+NBW-1
      IF(MJ.GT.NUMNDE) MJ=NUMNDE
      NJ=ICF+1
      LF=1
      DO 16 JCF=NJ,MJ
      LF=LF+1
16    FG(JCF)=FG(JCF)-KBN(ICF,LF)*FG(ICF)/KBN(ICF,1)
      SUMAVE=0.0
C      
      TSOLN(NUMNDE)=FG(NUMNDE)/KBN(NUMNDE,1)  ! NEW TEMPERATURE
C      
      SUMAVE=SUMAVE+TSOLN(NUMNDE)
      DO 18 KCF=1,NUMD
      ICCF=NUMNDE-KCF      
      MJ=NBW
      IF((ICCF+NBW-1).GT.NUMNDE) MJ=NUMNDE-ICCF+1
      SUM=0.0D0
      DO 17 JCF=2,MJ
      NCF=ICCF+JCF-1
17    SUM=SUM+KBN(ICCF,JCF)*TSOLN(NCF)
      TSOLN(ICCF)=(FG(ICCF)-SUM)/KBN(ICCF,1)  ! NEW TEMPERATURE
18    SUMAVE=SUMAVE+TSOLN(ICCF)
C CALCULATING THE AVERAGE TEMPERATURE
      TAVRG=SUMAVE/NUMNDE          	     ! AVERAGE TEMPERATURE
C             
      CALL CONVERGN(TSOLN,TEMIT1,CONVERG,ITER,NUMNDE)
C CHECK IF NOT CONVERG GOTO NEXT ITERATION
	  IF(.NOT.CONVERG) THEN
	  GOTO 12
	  ENDIF
C STORE PREVIOUS TIME STEP TEMPERATURE AND THE NEW ONE
	DO N=1,NUMNDE
	 TEMPT(N)=TEMPI(N)
	 TEMPI(N)=TSOLN(N)
	 TEMIT1(N)=TSOLN(N)
	END DO
C TO FIND THE AVERAGE TEMPERATURE FOR BOTH STEEL AND CONCRETE
	IF(NSTP.EQ.NCOUST) THEN
	ICONC=0
	ISTEL=0	
	CONTEMP=0.0D0
	STLTEMP=0.0D0
	DO IAVE=1,NUM
       I=NODE(1,IAVE)
       J=NODE(2,IAVE)
       K=NODE(3,IAVE)
	 TEMP_EL=(TEMPI(I)+TEMPI(J)+TEMPI(K))/3.0D0
	 IF(MATR(IAVE).EQ.1) THEN
	 ICONC=ICONC+1
	 CONTEMP=CONTEMP+TEMP_EL
	 ENDIF
	 IF(MATR(IAVE).EQ.2) THEN
	 ISTEL=ISTEL+1
	 STLTEMP=STLTEMP+TEMP_EL
	 ENDIF
	END DO
	IF(ICONC.NE.0) THEN
	CONAVE=CONTEMP/(ICONC*1.0)   ! AVERAGE CONCRETE TEMPERATURE.
	ENDIF
	IF(ISTEL.NE.0) THEN
	STLAVE=STLTEMP/(ISTEL*1.0)   ! AVERAGE STEEL TEMPERATURE.
	ENDIF
	ENDIF ! ENDIF FOR PRINTING TIMESTEP FOR AVERAGE TEMPERATURE
C**********************************
C ENTERING THE STRENGTH SUBROUTINE
C**********************************
      IF(YST.EQ.'Y'.OR.YST.EQ.'y') THEN
      OPEN(UNIT=12,FILE=PSTFILE,ACCESS='APPEND',STATUS='OLD')
      IF(TIME1.EQ.0.0D0) THEN
      PRINT *,'NOW CALCULATING THE STRENGTH, PLEASE BE PATIENT...'
      CALL STRENGTH(CN,TEMPI,NUM,NODE,YMAX,YMIN,Y,MATR,TIMEM,PSTMAX,
     .APPLOAD)
      WRITE(12,19) TIMEM,PSTMAX,TF,TAVRG
19    FORMAT(1X,F6.2,1X,F14.4,1X,F9.2,1X,F9.2)
      ENDIF
C
	IF(NSTP.EQ.NCOUST) THEN
      PRINT *,'NOW CALCULATING THE STRENGTH, PLEASE BE PATIENT...'
      CALL STRENGTH(CN,TEMPI,NUM,NODE,YMAX,YMIN,Y,MATR,TIMEM,PSTMAX,
     .APPLOAD)
      WRITE(12,19) TIMEM,PSTMAX,TF,TAVRG
      ENDIF
      CLOSE(UNIT=12)
	ENDIF
C**********************************
C PRINT ANSWERS INTO 'TEMPANS' AND SCREEN.
C**********************************
      CALL PRINT(NUMNDE,TIMEM,TF,TEMPI,TEMPT,NPRINT,NCOUNT,CN,DELM,
     .           TAVRG)
      IF(YST.EQ.'Y'.OR.YST.EQ.'y') THEN
	IF(NSTP.EQ.NCOUST) THEN
      IF(PSTMAX.LT.APPLOAD) THEN
      PRINT *,'THE COLUMN HAS FAILED !'
	IF(NAPY.EQ.0) THEN
	PRINT *,'CONTINUE? (Y/N)'
	READ(*,'(A1)') APY
	IF(APY.EQ.'Y'.OR.APY.EQ.'y') THEN
	 NAPY=1
	ELSE
	 RETURN
	ENDIF
	ENDIF
      ENDIF
      ENDIF
	ENDIF
C**********************************
C CHECKING THE MOISTURE CONTENT
C**********************************
	DO IMS=1,NUM
       I=NODE(1,IMS)
       J=NODE(2,IMS)
       K=NODE(3,IMS)
       XI=CN(1,I)
       YI=CN(2,I)
       XJ=CN(1,J)
       YJ=CN(2,J)
       XK=CN(1,K)
       YK=CN(2,K)
	 TEMP_EL=(TEMPI(I)+TEMPI(J)+TEMPI(K))/3.0D0
	 TEMPLD =(TEMPT(I)+TEMPT(J)+TEMPT(K))/3.0D0
       CALL READAT(MAT,KM,RHOC,TEMP_EL,ALPHA)
       CALL DETERM(XI,XJ,XK,YI,YJ,YK,DETC,IMS)
	 AREA=DETC/2.0D0
	 IF(MATR(IMS).EQ.1) THEN
	  IF(PHIM(IMS).GT.0.0.AND.TEMP_EL.GT.100.0) THEN
		 PHIM(IMS)=PHIM(IMS)-(TEMP_EL-TEMPLD)*RHOC/
     .        (RHOW*LAMW)
	     IF(PHIM(IMS).LT.0.00001D0) PHIM(IMS)=0.0D0
	      TEMPI(I)=TEMPT(I)
	      TEMPI(J)=TEMPT(J)
	      TEMPI(K)=TEMPT(K)
	     ENDIF
	  ENDIF
	END DO
C******************************************************************
C CALCULATING THE AXIAL STRAIN DUE TO APPLIED AND THERMAL EXPANSION
C******************************************************************
	IF(NSTP.EQ.NCOUST.OR.TIME1.EQ.0.0D0) THEN
	XXTIME=NNTIME/60.0
	PRINT '(A,F3.1,A,A)',' SAVE THE RESULT EVERY ',
     .XXTIME, ' MINUTES. IN FILE : ', TEMPANS
	STRAINMAX=0.0D0
	EO=200.0D9
	AXSTRESS=APPLOAD/(AREACON+AREASTL)
C 
C FOR MATERIAL STEEL
C
	IF(STLAVE.NE.0.0D0) THEN
	IF(STLAVE.LE.600.0) THEN
	 ET=(1.0D0+STLAVE/(2000.0D0*DLOG(STLAVE/1100.0D0)))*EO
	ELSE
	 ET=(690.0D0-0.69D0*STLAVE)/(STLAVE-53.5D0)*EO
	ENDIF
	IF(STLAVE.LE.1000) THEN
	ALFAS=(0.0040D0*STLAVE+12.0D0)*1.0D-06
	ELSE
	ALFAS=16.0D-6
	ENDIF
	XLOADSTRAIN=-AXSTRESS/ET
	THERMALSTRAIN=ALFAS*(STLAVE-20.0D0)
	STRAIN=THERMALSTRAIN+XLOADSTRAIN
	IF(STRAIN.GT.STRAINMAX) STRAINMAX=STRAIN
	ENDIF
C
C
C
C FOR MATERIAL CONCRETE
C
C
	IF(CONAVE.NE.0.0D0) THEN
	FDCO=35.0D06
	ALFAS=(0.0080D0*CONAVE+6.0D0)*1.0D-06
	EPMAX=(0.0025D0+(6.0D0*CONAVE+0.04D0*CONAVE**2)
     .       *1.0D-06)*(-1.0D0)
	IF(CONAVE.LT.450.0) FPC=FDCO
	IF(CONAVE.GE.450.0) FPC=FDCO*(2.011D0-2.353D0*
     .                        (CONAVE-20.0D0)/1.0D03)
	IF((AXSTRESS/FPC).GT.1.0) THEN
	PRINT *,'COLUMN HAS FAILED'
	GOTO 20
	STOP
	ENDIF
	DSQ=SQRT(1.0D0-AXSTRESS/FPC)
	EC=EPMAX-EPMAX*DSQ
	IF(EC.GT.EPMAX) EC=EPMAX+3.0D0*EPMAX*DSQ
	XLOADSTRAIN=-EC
      THERMALSTRAIN=ALFAS*(CONAVE-20.0D0)
	STRAIN=THERMALSTRAIN+XLOADSTRAIN
	IF(STRAIN.GT.STRAINMAX) STRAINMAX=STRAIN
	ENDIF !ENDIF FOR CONAVE IS NOT ZERO.
	OPEN(UNIT=7,FILE=STRNN,ACCESS='APPEND',STATUS='OLD')
	WRITE(7,*) TIMEM,STRAINMAX
	CLOSE(UNIT=7)
C
	ENDIF ! WHEN THE PRINTING TIMESTEP IS REACHED.
C
C %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
C
20    IF(NSTP.EQ.NCOUST) THEN
	NSTP=0
	ENDIF
	NSTP=NSTP+1
C
      TIME1=DELT+TIME1  ! TIME INCREASED FOR THE NEXT TIME STEP.
      GOTO 11         ! PROCEED TO NEXT TIME STEP.
21    CLOSE(UNIT=2)
      WRITE(*,*) '  '
      TMPHUND = 0
c      CALL GETDAT(TMPYEAR, TMPMONTH, TMPDAY)
c      CALL GETTIM(TMPHOUR, TMPMINUTE, TMPSECOND, TMPHUND)
C
C PRINTING THE RELEVANT FILES ON-SCREEN FOR ACKNOWLEDGEMENT.
C
	PRINT *,'************************************************'
      PRINT *,'THE STRENGTH FILE IS        ',PSTFILE
      PRINT *,'THE TEMPERATURE DATAFILE IS ',TEMPANS
      PRINT *,'THE DIMENSION DATAFILE IS   ',DIM
      PRINT *,'THE ELEMENT DATAFILE IS     ',ELDATA
      PRINT *,'THE COORDINATE DATAFILE IS  ',COORDAT
      PRINT *,'THE GLOBAL DATAFILE IS      GLOBAL2D.DAT'
      PRINT *,'THE LOG DATAFILE IS         LOG.DAT'
      PRINT *,'THE CONSTANT DATAFILE IS    CONSTANT.DAT'
      PRINT 22,'TIME :',TMPHOUR,TMPMINUTE,TMPSECOND
      PRINT 23,'DATE :',TMPDAY,TMPMONTH,TMPYEAR
	PRINT *,'************************************************'
	PRINT *,'PRESS ENTER'
22    FORMAT(1X,A,1X,I2,':',I2,':',I2)
23    FORMAT(1X,A,1X,I2,'/',I2,'/',I4)
	READ(*,*)
	RETURN
      END
C  ********************************************************
      SUBROUTINE TRIANG(EL,XI,YI,XJ,YJ,XK,YK,KEL,FC,TEMIT,
     .TEMP,IE,JE,KE,BC1,BC2,BC3,MAT,TF,DELT)
C  ********************************************************
C TO CALCULATE ELEMENTAL VALUE OF A LOCAL TRIANGULAR ELEMENT.
C THAT IS [C]{T'} + [K][{T} = {F}.
C
      DOUBLE PRECISION KXX(3,3),M(3,3),KT(3,3),KYY(3,3)
      DOUBLE PRECISION C(3,3),KEL(3,3),F(3),KTA,FCR(3)
      DOUBLE PRECISION TELEM(3),FC(3),TEMP(3),DETC,TEMIT(3)
      DOUBLE PRECISION TF,TFA,RHOC,TEMP_EL,ALPHA
      DOUBLE PRECISION KM,HB,T,EPSLB,SIGMAB ,DELT
      DOUBLE PRECISION XI,YI,XJ,YJ,XK,YK,AREA
      INTEGER EL,BC1,BC2,BC3
C
      COMMON /DATA/ T,HB,EPSLB,SIGMAB
      MAT1=MAT	 ! SET THE MATERIAL FLAG FOR USE IN THIS SUB
C
C TO SET EVERYTHING TO ZEROS
C
      CALL ZERO(FC,KXX,M,KT,KYY,C,KEL,F)
C
	TELEM(1)=TEMP(1)
	TELEM(2)=TEMP(2)
	TELEM(3)=TEMP(3)
C
C BC	  - BOUNDARY CONDITION, (0.) NOT AT BC AND (1.) - AT BC
C RHOC  - SPECIFIC HEAT*DENSITY
C ALPHA - THE THERMAL EXPANSION COEFFICIENT.
C T	  - THICKNESS
C READING MATERIAL DATA :-
C
	TEMP_EL=(TEMIT(1)+TEMIT(2)+TEMIT(3))/3.0D0
      CALL READAT(MAT,KM,RHOC,TEMP_EL,ALPHA)
C
C CALCULATE THE DETERMINANT OF THE TRIANGULAR ELEMENT
C
      CALL DETERM(XI,XJ,XK,YI,YJ,YK,DETC,EL)
C
C CALCULATE THE SURFACE AREA OF THE ELEMENT
C
      AREA=DETC/2.0D0
      ID1=EL
      ID2=IE
      ID3=JE
      ID4=KE
C
      KTA=KM*T*AREA
C
      CALL MM(XI,XJ,XK,YI,YJ,YK,DETC,M)
C
C STIFFNESS [K] FOR X-AXIS AND Y-AXIS
C
      CALL K_XX(KTA,M,KXX)
C
      CALL K_YY(KTA,M,KYY)
C
C HEAT CAPACITANCE MATRIX, [C]
C
      CALL CAPA(RHOC,DETC,C)
C
C TOTALING ALL THE STIFFNESS MATRICES
C 
      DO 2 IJ=1,3
	DO 1 JJ=1,3
	  KT(IJ,JJ)=KXX(IJ,JJ)+KYY(IJ,JJ)
	  KEL(IJ,JJ)=C(IJ,JJ)/DELT+KT(IJ,JJ)
1	CONTINUE
2     CONTINUE
C
C
C FORCE VECTOR = EXTERNAL HEAT FLOW AT THE FIRE BOUNDARY TO 
C                THE BOUNDARY SURFACE.
C
      TFA=TF ! FIRE TEMPERATURE
      CALL FX(XI,XJ,XK,YI,YJ,YK,BC1,BC2,BC3,FCR,TFA,TEMP,HB,SIGMAB,
     .EPSLB)
C
C TOTALING ALL OF THE FORCE VECTOR AT THE FIRE BOUNDARY.
C SET FC TO ZERO
C
      FC(1)=0.0D0
      FC(2)=0.0D0
      FC(3)=0.0D0
      DO 4 IF1=1,3
	 DO 3 IOP=1,3
	   FC(IF1)=(C(IF1,IOP)/DELT)*TEMP(IOP)+FC(IF1)
3	 CONTINUE
4     CONTINUE         
      DO IF1=1,3
	 F(IF1)=FCR(IF1)
	 FC(IF1)=FC(IF1)+F(IF1)
	END DO           
      RETURN
      END
C
C**************************************************************
C THIS SUBROUTINE CALCULATES THE NUMBER OF NODES OF COORDINATE
C DATAFILE.
C**************************************************************
C
      SUBROUTINE CALC(NNODE)
      INTEGER NNODE,COUNT
      CHARACTER*12 ELDATA,COORDAT
      COMMON /NAME$/ ELDATA,COORDAT
      OPEN(UNIT=8,FILE=COORDAT,STATUS='OLD')
      COUNT=0
      PRINT *, "COORDAT=",COORDAT
      DO 1 IJJ=1,10000
       READ(8,*,END=2) IJK
       COUNT=COUNT+1
1     CONTINUE
2     NNODE=COUNT
      CLOSE(UNIT=8)
       RETURN
       END
C
C**************************************************************
C THIS SUBROUTINE CALCULATES THE NUMBER OF ELEMENTS IN ELEMENT
C DATAFILE.
C**************************************************************
C
      SUBROUTINE ELENUM(NELEMT,BW)
      INTEGER NELEMT,BW
      CHARACTER*12 ELDATA,COORDAT
      COMMON /NAME$/ ELDATA,COORDAT
      OPEN(UNIT=3,FILE=ELDATA,STATUS='OLD')
      ICOUNT=0
      BW=0
      DO WHILE(.TRUE.)
      READ(3,*,END=1) NEL,IKL,JKI,KKI,IIBC1,IIBC2,IIBC3
       IJ=ABS(IKL-JKI)
       JK=ABS(JKI-KKI)
       KI=ABS(KKI-IKL)
       IF(IJ.GT.BW) BW=IJ
       IF(JK.GT.BW) BW=JK
       IF(KI.GT.BW) BW=KI
      ICOUNT=ICOUNT+1
      END DO
1     NELEMT=ICOUNT
      CLOSE(UNIT=3)
      RETURN
      END
C
C**************************************************************
C THIS SUBROUTINE READ THE MATERIAL DATA FROM MATERIAL 
C DATAFILE.
C**************************************************************
C
      SUBROUTINE READAT(XMAT,XKM,XRHO,TRAV,AALPHA)
      INTEGER XMAT
      DOUBLE PRECISION XRHO,TRAV,AALPHA,XKM
C
C XRHO = J M^-3 C^-1
C XKM  = W M^-1 C^-1   
C TRAV - AVERAGE TEMPERATURE IN THE ELEMENT.
C********* CONCRETE ***********
      IF(XMAT.EQ.1) THEN
      IF(TRAV.GT.0.D0.AND.TRAV.LE.200.D0) THEN
	  XRHO=0.005D06*TRAV+1.7D06
      ELSEIF(TRAV.GT.200.D0.AND.TRAV.LE.400.D0) THEN
	  XRHO=2.7D06	
      ELSEIF(TRAV.GT.400..AND.TRAV.LE.500.) THEN
	  XRHO=0.013D06*TRAV-2.5D06
      ELSEIF(TRAV.GT.500.D0.AND.TRAV.LE.600.D0) THEN
	  XRHO=-0.013D06*TRAV+10.5D06
      ELSEIF(TRAV.GT.600.D0) THEN
	  XRHO=2.7D06
      ENDIF

      IF(TRAV.GT.0.D0.AND.TRAV.LE.800.D0) THEN
	  XKM=-0.000625D0*TRAV+1.5D0
      ELSEIF(TRAV.GT.800.D0) THEN
	  XKM=1.0D0
      ENDIF
      AALPHA=(0.008D0*TRAV+6.0D0)/10.D06
C ************ STEEL ***********      
      ELSEIF(XMAT.EQ.2) THEN  !/*THIS IS STEEL MATERIAL DATA*/
      IF(TRAV.GT.0.D0.AND.TRAV.LE.650.D0) THEN
	  XRHO=0.004D06*TRAV+3.30D06
      ELSEIF(TRAV.GT.650.D0.AND.TRAV.LE.725.D0) THEN
	  XRHO=0.068D06*TRAV-38.3D06
      ELSEIF(TRAV.GT.725.D0.AND.TRAV.LE.800.D0) THEN
	  XRHO=-0.086D06*TRAV+73.35D06
      ELSE
	  XRHO=4.55D06
      ENDIF
      IF(TRAV.GT.0.D0.AND.TRAV.LE.900.D0) THEN
	  XKM=(-0.022D0*TRAV+48.D0)
      ELSE
	  XKM=28.2D0
	  ENDIF 
      IF(TRAV.LT.1000.D0) AALPHA=(0.004D-06*TRAV+12.0D-06)
      IF(TRAV.GE.1000.D0) AALPHA=16.0D-06      
C ************ INSULATOR **********      
	  ELSEIF(XMAT.EQ.3) THEN	
      XRHO=96.0D03	
      XKM = ((2.91D-02)+((6.54D-05)*TRAV)+((2.52D-07)*TRAV**2))
C ************ ADD NEW MATERIAL HERE **********
	  ELSEIF(XMAT.EQ.4) THEN ! ALUNIMUM DURALUMIN
	  XKM=159.0D0
	  XRHO=0.883D0*2787.0D0
C *********************************************
      ENDIF
      RETURN
      END
C
C**************************************************************
C THIS SUBROUTINE CALCULATES [KYY] OF LOCAL MATRIX
C**************************************************************
C
      SUBROUTINE K_YY(KTA,M,KYY)
      DOUBLE PRECISION KTA,M(3,3),KYY(3,3)
      KYY(1,1)=M(3,1)**2*KTA
      KYY(1,2)=M(3,1)*M(3,2)*KTA
      KYY(1,3)=M(3,1)*M(3,3)*KTA
      KYY(2,1)=M(3,2)*M(3,1)*KTA
      KYY(2,2)=M(3,2)**2*KTA
      KYY(2,3)=M(3,2)*M(3,3)*KTA
      KYY(3,1)=M(3,3)*M(3,1)*KTA
      KYY(3,2)=M(3,3)*M(3,2)*KTA
      KYY(3,3)=M(3,3)**2*KTA
      RETURN
      END
C
C**************************************************************
C THIS SUBROUTINE CALCULATES [KXX] OF LOCAL MATRIX
C**************************************************************
C
      SUBROUTINE K_XX(KTA,M,KXX)
      DOUBLE PRECISION KTA,M(3,3),KXX(3,3)
      KXX(1,1)=M(2,1)**2*KTA
      KXX(1,2)=M(2,1)*M(2,2)*KTA
      KXX(1,3)=M(2,1)*M(2,3)*KTA
      KXX(2,1)=M(2,2)*M(2,1)*KTA
      KXX(2,2)=M(2,2)**2*KTA
      KXX(2,3)=M(2,2)*M(2,3)*KTA
      KXX(3,1)=M(2,3)*M(2,1)*KTA
      KXX(3,2)=M(2,3)*M(2,2)*KTA
      KXX(3,3)=M(2,3)**2*KTA
      RETURN
      END
C
C**************************************************************
C THIS SUBROUTINE CALCULATES [MM] FOR [K] OF LOCAL MATRIX
C**************************************************************
C
      SUBROUTINE MM(XI,XJ,XK,YI,YJ,YK,DETC,M)
      DOUBLE PRECISION M(3,3),DETC,XI,XJ,XK,YI,YJ,YK
      M(1,1)=(XJ*YK-XK*YJ)/DETC
      M(1,2)=(XK*YI-XI*YK)/DETC
      M(1,3)=(XI*YJ-XJ*YI)/DETC
      M(2,1)=(YJ-YK)/DETC
      M(2,2)=(YK-YI)/DETC
      M(2,3)=(YI-YJ)/DETC
      M(3,1)=(XK-XJ)/DETC
      M(3,2)=(XI-XK)/DETC
      M(3,3)=(XJ-XI)/DETC
      RETURN
      END
C*************************************************************
C THIS SUBROUTINE CALCULATES THE DETERMINANT OF 
C THE TRIANGLE.
C*************************************************************
      SUBROUTINE DETERM(XI,XJ,XK,YI,YJ,YK,DETM,IL)
      DOUBLE PRECISION DETM,XI,XJ,XK,YI,YJ,YK
      DETM=(XJ*YK-YJ*XK)-(XI*YK-XI*YJ)+(YI*XK-XJ*YI)
      IF(DETM.EQ.0.0) THEN
      PRINT *,'         '
      PRINT *,'DETERMINANT ZERO AT ELEMENT =',IL
      PRINT *,'THERE IS A FAULT IN THE ELEMENT DATA OR COORDINATE DATA.'
	  PRINT *,'PROGRAM STOPS.'
      STOP
      ENDIF
      RETURN
      END
C ***********************************************
C FORCE VECTOR
C ***********************************************
      SUBROUTINE FX(XI,XJ,XK,YI,YJ,YK,BC1,BC2,BC3,F,TA,TM,HB,SIGMAB,E)
      DOUBLE PRECISION F(3),L,TA,TM(3),SIGMAB,E,XI,XJ,XK,YI,YJ,YK
      DOUBLE PRECISION HB,TS
      INTEGER BC1,BC2,BC3
C
	  F(1)=0.0D0
	  F(2)=0.0D0
	  F(3)=0.0D0
	
      IF(BC1.EQ.1) THEN
	  L=DSQRT((XJ-XI)**2+(YJ-YI)**2)
	  TS=(TM(1)+TM(2))/2.0D0
	  F(1)=L*(HB*(TA-TS)+SIGMAB*E*((TA+273.0D0)**4-(TS+273.D0)**4))
     . 	+F(1)
	  F(2)=L*(HB*(TA-TS)+SIGMAB*E*((TA+273.0D0)**4-(TS+273.D0)**4))
     . 	+F(2)
	  F(3)=0.0D0	        +F(3)
      ENDIF
C
      IF(BC2.EQ.1) THEN
	  L=DSQRT((XJ-XK)**2+(YJ-YK)**2)
	  TS=(TM(3)+TM(2))/2.0D0
	  F(2)=L*(HB*(TA-TS)+SIGMAB*E*((TA+273.D0)**4-(TS+273.D0)**4))
     . 	+F(2)
	  F(3)=L*(HB*(TA-TS)+SIGMAB*E*((TA+273.D0)**4-(TS+273.D0)**4))
     . 	+F(3)
	  F(1)=0.0D0		+F(1)
      ENDIF
C
      IF(BC3.EQ.1) THEN
	  L=DSQRT((XK-XI)**2+(YK-YI)**2)
	  TS=(TM(3)+TM(1))/2.0D0
	  F(3)=L*(HB*(TA-TS)+SIGMAB*E*((TA+273.D0)**4-(TS+273.D0)**4))
     . 	+F(3)
	  F(1)=L*(HB*(TA-TS)+SIGMAB*E*((TA+273.D0)**4-(TS+273.D0)**4))
     . 	+F(1)	
	  F(2)=0.0D0		+F(2)
      ENDIF          
      RETURN
      END
C ***********************************************
C READING GLOBAL DATA SUBROUTINE
C ***********************************************
      SUBROUTINE DATGBL(T,DELT,HB,EPSLB,CTIME,TEINIT,NT,TF,AP,
     .                  MOIT)
      CHARACTER*40 DUMMY
      CHARACTER GLOBNAME*12
      DOUBLE PRECISION T,DELT,HB,EPSLB,CTIME,TEINIT,NT,TF,AP,MOIT
C                                                                   
      GLOBNAME='GLOBAL2D.DAT'
      OPEN(UNIT=9,FILE=GLOBNAME,IOSTAT=IE,STATUS='OLD')      
C      
      IF(IE.GT.0) THEN
      CLOSE(UNIT=9)
      PRINT *,'*****************************************************'
      PRINT *,'                  IMPORTANT'
      PRINT *,'*****************************************************'
      PRINT *,'THE GLOBAL DATA FILE IS NOT FOUND !'
      PRINT *,'A NEW ONE WILL BE CREATED.'
      PRINT *,'THE DATAFILE IS SAVED BY THE NAME ',GLOBNAME
      PRINT *,'YOU MAY EDIT ,',GLOBNAME,', TO CHANGE',
     .        'THE CONTROL VARIABLES'
      PRINT *,'*****************************************************'
      OPEN(UNIT=9,FILE=GLOBNAME,STATUS='NEW')
      T=1.0D0
      PRINT 7, ' TIME STEP (SECONDS) :'
      READ(*,*) DELT
      PRINT 7, ' CONVECTIVE COEFF. :'
      READ(*,*) HB
      PRINT 7, ' EMMISIVITY :'
      READ(*,*) EPSLB
      PRINT 7, ' DURATION (HOURS) :'
      READ(*,*) CTIME
      PRINT 7, ' INITIAL TEMPERATURE, (C) :'
      READ(*,*) TEINIT
      PRINT 7, ' PRINT AT EVERY X SECOND :'
      READ(*,*) NT
      PRINT 7, ' FIRE TEMPERATURE, TYPE 0 (ZERO) TO USE ASTM-E119 :'
      READ(*,*) TF
      PRINT 7, ' APPLIED LOAD (NEWTON) :'
      READ(*,*) AP
      PRINT 7, ' MOISTURE CONTENT (% OF VOLUME) :'
      READ(*,*) MOIT
7     FORMAT(A)      
      WRITE(9,*) 'GLOBAL INFORMATION DATA USED TO RUN THE PROGRAM'
      WRITE(9,*) '-----------------------------------------------'
      WRITE(9,3) 'THICKNESS,M                    =',T
      WRITE(9,3) 'TIME INTERVAL IN SECONDS       =',DELT
      WRITE(9,3) 'CONVECTIVE HEAT TRANS COEFF-NT =',HB
      WRITE(9,3) 'EPSILONB (EMMISIVITY)          =',EPSLB
      WRITE(9,3) 'TIME IN HOURS ,MAXIMUM         =',CTIME
      WRITE(9,3) 'INITIAL TEMPERATURE (CELCIUS)  =',TEINIT
      WRITE(9,3) 'PRINT RESULTS IN EVERY X SECS  =',NT
      WRITE(9,3) 'FIRE TEMPERATURE (IF 0. USE TF)=',TF
      WRITE(9,3) 'APPLIED LOAD (NEWTON)          =',AP
      WRITE(9,3) 'MOISTURE CONTENT (%)           =',MOIT
3     FORMAT(1X,A,F30.10)      
      GOTO 2  
      ENDIF
C                 
      READ(9,'(A40)') DUMMY                 
      READ(9,'(A40)') DUMMY                 
      READ(9,1) T
      READ(9,1) DELT
      READ(9,1) HB
      READ(9,1) EPSLB
      READ(9,1) CTIME
      READ(9,1) TEINIT
      READ(9,1) NT
      READ(9,1) TF
      READ(9,1) AP
      READ(9,1) MOIT
1     FORMAT(33X,D30.16)
2     CLOSE(UNIT=9)
      RETURN
      END
C ********************************************************
C CAPACITY MATRIX, CALCULATE HEAT CAPACITANCE MATRIX [C]
C ********************************************************
      SUBROUTINE CAPA(RHOC,DETC,C)
      DOUBLE PRECISION C(3,3),DETC,RHOC,T,HB,EPSLB,SIGMAB
      COMMON /DATA/ T,HB,EPSLB,SIGMAB
      T=1.0D0
      K=1
      IF(K.EQ.1) THEN
       C(1,1)=(RHOC*T)*DETC/12.D0
       C(1,2)=(RHOC*T)*DETC/2.D0/12.D0
       C(1,3)=(RHOC*T)*DETC/2.D0/12.D0
       C(2,1)=(RHOC*T)*DETC/2.D0/12.D0
       C(2,2)=(RHOC*T)*DETC/12.D0
       C(2,3)=(RHOC*T)*DETC/2.D0/12.D0
       C(3,1)=(RHOC*T)*DETC/2.D0/12.D0
       C(3,2)=(RHOC*T)*DETC/2.D0/12.D0
       C(3,3)=(RHOC*T)*DETC/12.D0
      ELSE
C LUMPED CAPACITANCE MATRICES
      C(1,1)=(RHOC*T)*DETC/6.D0
      C(1,2)=0.D0
      C(1,3)=0.D0
      C(2,1)=0.D0
      C(2,2)=(RHOC*T)*DETC/6.D0
      C(2,3)=0.D0
      C(3,1)=0.D0
      C(3,2)=0.D0
      C(3,3)=(RHOC*T)*DETC/6.D0
      ENDIF
      RETURN
      END
C
C**************************************************************
C THIS SUBROUTINE SETS ALL MATRICES TO ZERO
C**************************************************************
C
      SUBROUTINE ZERO(FC,KXX,M,KT,KYY,C,KEL,F)
      DOUBLE PRECISION KXX(3,3),M(3,3),KT(3,3),KYY(3,3)
      DOUBLE PRECISION C(3,3),KEL(3,3),F(3)
      DOUBLE PRECISION FC(3)
      DO 35 IS=1,3
      DO 36 JS=1,3
	  FC(IS)=0.0D0
	  KXX(IS,JS)=0.0D0
	  M(IS,JS)=0.0D0
	  KT(IS,JS)=0.0D0
	  KYY(IS,JS)=0.0D0
	  C(IS,JS)=0.0D0
	  KEL(IS,JS)=0.0D0
	  F(IS)=0.0D0
36    CONTINUE
35    CONTINUE
      RETURN
      END
C *************************************************
      SUBROUTINE HEADER
      PRINT *, 'DATAFILE GLOBAL = GLOBAL2D.DAT'
	  PRINT *, 'LOG DATAFILE    = LOG.DAT'
      PRINT *, 'DO NOT DELETE ANY FILE THAT HAS EXTENSION .DAT !'
      RETURN
      END
C *************************************************
      SUBROUTINE HEADER2
      PRINT *, '-----------------------------------------------------'
      PRINT *, 'CHOOSE THE DATAFILE:-'
      PRINT *, '   '
      PRINT *, '1 - TO GET ANOTHER BRAND NEW DATAFILE'
      PRINT *, '2 - TO USE PREVIOUS/EXISTED DATAFILE'
      PRINT *, '================================================'      
      RETURN
      END
C**********************************************************
      SUBROUTINE PAUSE
      WRITE(*,*) 'PRESS ENTER...'
      READ(*,*)
      RETURN
      END
C***********************************************************
      SUBROUTINE CONVERGN(TNEW,TOLD,CONVERG,ITER,NUMNDE)
      INTEGER ELX,NDX
      PARAMETER (ELX=1200,NDX=1000) ! ELX- MAX ELEMENT NO., NDX-MAX NODE NO.
      DOUBLE PRECISION TNEW(NDX),TOLD(NDX)
      LOGICAL CONVERG
      CONVERG=.TRUE.
	  DO N=1,NUMNDE
	  CHECK=2.0D0*ABS(TNEW(N)-TOLD(N))/ABS(TNEW(N)+TOLD(N))
	  IF(CHECK.GT.0.01) THEN
	  CONVERG=.FALSE.
	  DO M=1,NUMNDE
	  TOLD(M)=TNEW(M)+(-0.20D0)*(TNEW(M)-TOLD(M))
	  END DO
	  ITER=ITER+1
	  ENDIF          
	  END DO    
	  RETURN
	  END
C *******************************************
      SUBROUTINE PRINT(NUMNDE,TIMEM,TF,TEMPI,TEMPT,NPRINT,NCOUNT,
     .CN,DTM,TAV)
      INTEGER ELX,NDX
      PARAMETER (ELX=1200,NDX=1000) ! ELX- MAX ELEMENT NO., NDX-MAX NODE NO.
      DOUBLE PRECISION TIMEM,TF,TEMPI(NDX),TEMPT(NDX),CN(2,NDX),TMAX,
     .TMIN 
      TMAX=0.0D0
      TMIN=1.0D05
C      
      DO 1 IS=1,NUMNDE
       IF(TEMPI(IS).GT.TMAX) THEN 
        TMAX=TEMPI(IS)
        NTMX=IS
       ENDIF
       IF(TEMPI(IS).LT.TMIN) THEN
       TMIN=TEMPI(IS)
       NTMN=IS
       ENDIF
1     CONTINUE 
      PRINT 2,TIMEM,TF,TAV,TMAX,NTMX,TMIN,NTMN,TF-TMAX
	WRITE(4,2) TIMEM,TF,TAV,TMAX,NTMX,TMIN,NTMN,TF-TMAX
2     FORMAT(1X,F7.3,1X,F6.1,1X,F6.1,1X,2(F6.1,1X,I3,1X),F6.1)
C      
	  IF(NPRINT.EQ.NCOUNT.OR.TIMEM.EQ.0.0) THEN	
      DO 4 ITEMP=1,NUMNDE      
      DTFF=TF-TEMPI(ITEMP)
      DTM=TF-TEMPI(NTMX)
      DEL=TF-TEMPI(ITEMP)
	  WRITE(2,3) TF,TIMEM,ITEMP,CN(1,ITEMP),CN(2,ITEMP),TEMPI(ITEMP),
     .	             TEMPT(ITEMP)
3 	  FORMAT(1X,F9.3,1X,F5.1,1X,I4,2(1X,F8.4),1X,F9.3,1X,F9.3,1X,F6.1)
C
C	  IF(TEMPI(ITEMP).GT.TF.AND.TIMEM.GT.0.0) THEN
C	  WRITE(*,*)  'TEMPERATURE EXCEEDING FIRE TEMPERATURE !',ITEMP,DEL
C	  ENDIF             
4     CONTINUE
      ENDIF
C CHECK FOR PRINTING FLAG      
	  IF(NPRINT.EQ.NCOUNT) THEN	
      NPRINT=0
      ENDIF
      NPRINT=NPRINT+1
      RETURN
      END
C ********************************************************
C SUBROUTINE STRENGTH CALCULATES THE STRENGTH OF
C DUAL SYMMETRICAL AXIS COLUMN
C ********************************************************
      SUBROUTINE STRENGTH(CN,T,NEL,NODE,YMAX,YMIN,Y,MAT,TIMEX,PSTMAX,
     .APPLOAD)
      INTEGER ELX,NDX
      PARAMETER (ELX=1200,NDX=1000) ! ELX- MAX ELEMENT NO., NDX-MAX NODE NO.
      INTEGER TTYPE,DEC01,NODE(3,ELX),MAT(ELX),YINDIC,EINDIC
      DOUBLE PRECISION CN(2,NDX),T(NDX),AREA(ELX),XC(ELX),TC(ELX),
     .YMAX,YMIN,Y,DETM,ROH,PSR,PSL,EO,FYSO,FDCO,ALFAS,TTAVG,
     .FYT,ET,EPSP,EPMAX,FPC,C,EPRM,EPLM,YMAXY,EPAX0,EPAX1,
     .MSTMAX
      DOUBLE PRECISION MSL,MSR,MST,KL,EPTS(ELX),EPSR(ELX),EPSL(ELX),
     .FSR(ELX),FSL(ELX),EPRESN,EPTOT,PSTMAX,APPLOAD
      DOUBLE PRECISION ECC,PST,EPAXL,TIMEX,FR_RT
C
C.....OPENING DATAFILE ........
C
      DO 1 INEL=1,NEL
      IEL=NODE(1,INEL)
      JEL=NODE(2,INEL)
      KEL=NODE(3,INEL)
      X1=CN(1,IEL)
      X2=CN(1,JEL)
      X3=CN(1,KEL)
      Y1=CN(2,IEL)
      Y2=CN(2,JEL)
      Y3=CN(2,KEL)
      XC(INEL)=(X1+X2+X3)/3.0D0
      DETM=(X2*Y3-Y2*X3-(X1*Y3-X1*Y2)+(Y1*X3-X2*Y1))
      AREA(INEL)=DETM/2.0D0
C CALCULATE THE TEMPERATURE AT ELEMENT CENTRE POINT.	
	  TC(INEL)=(T(IEL)+T(JEL)+T(KEL))/3.0D0
C
1     CONTINUE                             
C ******************************************************
C  THE FOLLOWING STATEMENTS SOLVE THE STRENGTH OF COLUMN
C ******************************************************
      YINIT =0.000001D0        ! INITIAL DEFLECTION,(M)
      EXINIT=0.0D0             ! INITIAL AXIAL STRAIN
      ECC   = 0.0002D0         ! VALUE OF ECCENTRICITY,(M)
C ********************
      Y=YINIT               
      PSTMAX=0.0D0
      PST=0.0D0
      EINDIC = 0
      YINDIC = 0
      MSTMAX=0.0D0
      FR_RT=10.0D0
C      
   2  CONTINUE     ! VARYING Y, AXIAL STRAIN IS SET TO ZERO.
      PRINT *, 'Max  Load =',PSTMAX,' Load=',PST
      PSTMAXY = 0.0D0
      INC04   = 0
      INC03   = 0
      INC02   = 0
      INDM    = 0
      INDN    = 0
      INC01   = 0
      DEC01   = 0
      EPAXL   = 0.00D0
      KL      = 2.00D0
      ROH     = (KL**2)/(12.D0*Y)
C ELEMENTWISE COMPUTATION      
   3  PSR = 0.0D0    ! Y CONSTANT AND STRAIN VARIES                                
      PSL = 0.0D0
      MSR = 0.0D0
      MSL = 0.0D0
      MST = 0.0D0
      PST = 0.0D0
      EPTOT=0.0D0
      EPRM =0.0D0
      EPLM =0.0D0
      DO 14 J = 1,NEL     
      IF(MAT(J).GE.3) GOTO 14
C *******MATERIAL*****
      IF(MAT(J).EQ.2) THEN  ! STEEL
       EO   = 200.0D09      ! MODULUS YOUNG, N/M^2
       FYSO = 300.0D06      ! YIELD STRESS, N/M^2
      ENDIF 
      IF(MAT(J).EQ.1) THEN  ! CONCRETE
       FDCO=35.0D06
      ENDIF
C ************MATERIAL      
C COEFF FOR LINEAR EXPANSION DUE TO TEMPERATURE DIFFERENCE
      TTAVG=TC(J)
C MATERIAL ********************      
      IF(MAT(J).EQ.2) THEN  ! STEEL.
       IF(TTAVG .LT. 1000.0D0) THEN
         ALFAS = (0.0040D0*TTAVG + 12.0D0)*1.0D-06
       ELSE
         ALFAS = 16.0D-06
       ENDIF                    
      ENDIF
      
      IF(MAT(J).EQ.1) THEN  ! CONCRETE.
       ALFAS=(0.0080D0*TTAVG+6.0D0)*1.0D-06
      ENDIF
      
C *********************MATERIAL      
C  VALUE FOR STRENGTH AND FORCE COMPUTATION
C MATERIAL ********************      
      IF(MAT(J).EQ.2) THEN  ! STEEL
       IF(TTAVG .LE. 600.0D0) THEN
        FYT = (1.0D0 + TTAVG/(900.0D0*DLOG(TTAVG/1750.0D0)))*FYSO
        ET  = (1.0D0 + TTAVG/(2000.0D0*DLOG(TTAVG/1100.0D0)))*EO
       ELSE
        IF(TTAVG.GE.1000.0D0) TTAVG = 999.9D0
        FYT=(340.0D0-0.34D0*TTAVG)/(TTAVG-240.0D0)*FYSO
        ET =(690.0D0-0.69D0*TTAVG)/(TTAVG-53.5D0)*EO
       ENDIF                     
C
       EPSP=(0.975D0*FYT-12.5D0*(FYT**2.0D0/ET))/(ET-12.5D0*FYT)
      ENDIF 
C FOR MATERIAL CONCRETE ********                          
      IF(MAT(J).EQ.1) THEN  ! CONCRETE
       EPMAX=0.0025D0+(6.0D0*TTAVG+0.04D0*TTAVG**2)*1.0D-06
       IF(TTAVG.LT.450.0D0) THEN
       FPC=FDCO
       ELSE
       FPC=FDCO*(2.011D0-2.353D0*(TTAVG-20.D0)/1.0D03)
       ENDIF
      ENDIF
C *********************MATERIAL      
C
      EPTS(J)=-ALFAS*(TTAVG-20.0D0)
      EPSR(J)=EPTS(J)+EPAXL+XC(J)/ROH
      EPSL(J)=EPTS(J)+EPAXL-XC(J)/ROH
      IF(ABS(EPSR(J)).GT.EPRM) EPRM=EPSR(J)
      IF(ABS(EPSL(J)).GT.EPLM) EPLM=EPSL(J)
C
C CALCULATION OF STRESSES, LOADS AND MOMENTS
C
C PSR= LOAD IN STEEL AT RIGHT SIDE
C PSL= LOAD IN STEEL AT LEFT
C PST= TOTAL LOAD OF STEEL
C FSR= STRESS IN STEEL AT RIGHT SIDE
C FSL= STRESS IN STEEL AT LEFT
C MSR= MOMENT IN STEEL AT RIGHT
C MSL= MOMENT IN STEEL AT LEFT
C
C MATERIAL ********************      
      IF(MAT(J).EQ.2) THEN  ! STEEL
       IF (EPSR(J) .LT. 0.00D0) THEN
        C = 1.00D0
       ELSE
        C = -1.00D0
       ENDIF        
C       
      IF (ABS(EPSR(J)) .LE. EPSP) THEN  
        FSR(J)= C*ET*ABS(EPSR(J))
       ELSE
        FSR(J)=C*(12.5D0*FYT*ABS(EPSR(J))+0.975D0*FYT-12.5D0
     .  *FYT**2/ET)
       ENDIF
      ENDIF ! END MATERIAL STEEL      
C      
      IF(MAT(J).EQ.1) THEN  ! CONCRETE
      IF(FPC .GT. FDCO) FPC=FDCO
      IF(FPC .LE. 0.00) FPC=0.00D0
      IF(EPSR(J)-0.00D00) 5 , 4 , 4
   4  FSR(J)=0.00D00
      GO TO 8
   5  IF(DABS(EPSR(J))-EPMAX) 6,6,7
   6  FSR(J)=FPC*(1.0D0-((EPMAX+EPSR(J))/EPMAX)**2)
      GO TO 8         
   7  FSR(J)=FPC*(1.0D0-((-EPSR(J)-EPMAX)/(3.0D0*EPMAX))**2)
      IF(FSR(J) .LT. 0.00) FSR(J)=0.00D0
   8  CONTINUE
      IF(EPSL(J)-0.00D00) 10,9,9
   9  FSL(J)=0.0D00
      GO TO 13
   10 IF(DABS(EPSL(J))-EPMAX) 11,11,12
   11 FSL(J)=FPC*(1.0D0-((EPMAX+EPSL(J))/EPMAX)**2)
      GO TO 13
   12 FSL(J)=FPC*(1.0D0-((-EPSL(J)-EPMAX)/(3.0D0*EPMAX))**2)
      IF(FSL(J) .LT. 0.00D0) FSL(J)=0.00D0 
   13 CONTINUE
      ENDIF ! END OF MATERIAL CONCRETE
C *********************MATERIAL
C
      PSR = PSR + FSR(J)*AREA(J)
      MSR = MSR + FSR(J)*AREA(J)*XC(J)
C
C MATERIAL ********************      
      IF(MAT(J).EQ.2) THEN  ! STEEL
       IF (EPSL(J) .LT. 0.00D0) THEN
        C= 1.0D0
       ELSE
        C= -1.0D0
       ENDIF
C      
       IF (ABS(EPSL(J)) .LE. EPSP) THEN  
        FSL(J)=C*ET*ABS(EPSL(J))
       ELSE
        FSL(J)=C*(12.5D0*FYT*ABS(EPSL(J))+0.975D0*FYT-12.5D0
     .  *FYT**2/ET)
       ENDIF
      ENDIF ! END FOR MATERIAL STEEL
C *********************MATERIAL      
C      
      PSL=PSL+FSL(J)*AREA(J)
      MSL=MSL+FSL(J)*AREA(J)*XC(J)
C     
   14 CONTINUE    
C  
      PST=(PSR+PSL)*2.0D0
      MST=-(MSR-MSL)*2.0D0
      EPTOT=(EPRM + EPLM)/2.0D0
C      
      YMAXY = Y
      EPAX0=EPAXL
C      
      CALL CONVG(ECC,Y,TTYPE,PST,MST,EPAXL,
     .INC04,INC03,INC02,INDN,INDM,INC01,DEC01,TIMEX,FR_RT)
C       
C       
  15  IF (TTYPE.EQ.1) THEN  !  WHAT IS TTYPE STANDS FOR 
          PRINT *, 'TTYPE=1'
          IF (EPTOT .LE. EPRESN .AND. EINDIC .EQ. 0) THEN
                  PSTMAX = PST
                  YMAX   = YMAXY
                  EPAX1  = EPAX0
                  MSTMAX = MST  
          ENDIF
          GOTO 17 ! GO TO NEXT TIME STEP
      ELSEIF (TTYPE.EQ.2) THEN  ! MEANS THE VALUE OF PREVIOUS Y HAS CONVERGED
C
         IF (TIMEX .EQ. 0.0) THEN
            IF (PST.GT.PSTMAX) THEN 
               PSTMAX = PST
               EPRESN = EPTOT
               YMAX   = YMAXY
               EPAX1  = EPAX0
               MSTMAX = MST
            ELSE
               IF((PSTMAX-PST).GT.0.005D0*PSTMAX) THEN
               GOTO 16  ! MEANS GO TO NEXT TIME STEP
               ENDIF
            ENDIF
C           THE NEXT LINE, GETTING THE STARTING Y VALUE FOR THE NEXT
C           TIME-STEP.               
            IF (PST .GE.APPLOAD .AND. YINDIC.EQ. 0) THEN
                YMIN = YMAXY ! WHAT IS YMIN
                YINDIC = 1
            ENDIF    
          ELSE
C     EPRSN IS THE STRAIN OF A CONSTANT VALUE WHICH CORRESPOND TO THE
C     COMPRESSIVE AXIAL STRAIN AT TIME-STEP ZERO IE AT ROOM TEMPERATURE.
C     EPTOT IS THE COMPRESSIVE AXIAL STRAIN AT VARIOUS Y VALUE.
            IF (PST.GT.PSTMAX) THEN
C            IF (EPTOT .LE. EPRESN .AND. EINDIC .EQ. 0) THEN
               PSTMAX = PST
               YMAX = YMAXY
               EPAX1 = EPAX0
               MSTMAX = MST
               EINDIC = 1
            ELSE
               IF((PSTMAX-PST).GT.0.005D0*PSTMAX) THEN
               GOTO 16
               ENDIF
            ENDIF
              IF (PST .GE.APPLOAD .AND. YINDIC.EQ. 0) THEN
                YMIN = YMAXY
                YINDIC = 1
              ENDIF    
          ENDIF
          GOTO 2
      ELSEIF (TTYPE.EQ.3) THEN   ! MEANS NOT CONVERGED YET.
          GOTO 3 ! GOING BACK TO LOADMS AND INC0 VALUE INCREASES
      ELSE
          GOTO 17 ! OTHER VALUE OF TTYPE = 1,2,3
      ENDIF
C
   16 CONTINUE
C
   17 GOTO 19
   18 GOTO 19
C     
   19 WRITE(2,20) TIMEX,PSTMAX,Y 
      WRITE(*,20) TIMEX,PSTMAX,Y 
   20 FORMAT(1X,'TIME=',F6.2,1X,'PSTMAX=',F23.4,' Y=',E8.3)      
      RETURN
      END 
C
C ================================================================
C CALCULATE THE POINTS OF CONVERGENCE OF THE INTERNAL AND EXTERNAL
C MOMENT LOADS ACTING ON THE COLUMNS.
C ================================================================
      SUBROUTINE CONVG(ECC,Y,TTYPE,PST,MST,EPAXL,
     .INC04,INC03,INC02,INDN,INDM,INC01,DEC01,TIME,FR_RT)
C 
      INTEGER TTYPE,INC03,INC02,INDN,INDM,INC01,DEC01,INC04
      DOUBLE PRECISION PECCY,ECC,Y,PST,MST,EPAXL,FACT,TIME,FR_RT,
     .XTIME 
C THIS SUBROUTINE IS CHECKING THE VALUE OF AXIAL STRAIN DUE
C TO THE AXIAL LOAD AND TRY TO INCREASE IT OR DECREASE IT 
C UNTIL THE BENDING IS BALANCED.
      XTIME=TIME
      XTIME=FR_RT
      TTYPE = 0      
      INC04 = INC04 + 1
      PECCY=PST*(Y+ECC)   
      IF (Y .LT. 0.0001D0) THEN      
  200   FACT = 40.0D0
      ELSEIF (Y .LT. 0.0004D0) THEN
  210   FACT = 25.0D0
      ELSEIF (Y .LT. 0.0010D0) THEN
  220   FACT = 15.0D0
      ELSE
        FACT = 10.0D0
      ENDIF
C
C
  240 IF (ABS(MST-PECCY).LE. 0.020*MST .AND. INC03.GT.0) THEN  !1
C IE BALANCED REACHED SO PROCEED TO PRINTING THE CURRENT PARAMETERS AND
C LATER THE DEFLECTION Y IS INCREASED.
        GOTO 620
      ELSE ! IF NOT CONVERGED YET..
  260   IF (INC03 .EQ. 0 .AND. INC02 .EQ. 0) THEN !2
C AS INC03 AND INC02 EQUAL TO 0, IT MEANS THIS IS THE INITIAL
C STAGE OF EPAXL MANIPULATION. THERE IS AN INTERMEDIATE STAGE, INC02
C AND FINAL STAGE, INC03.
  320     IF(PST .LE. 0.00 .AND. INC01 .EQ. 0) THEN  !3
            EPAXL = EPAXL - 0.001/FACT
            TTYPE = 3
            RETURN
          ELSE
  380       IF(MST .LT. 0.00) THEN                     !4
              GOTO 600
            ELSE                      
              IF (MST .EQ. PECCY) THEN                   !5
                GOTO 620
              ELSEIF (MST .LT. PECCY) THEN
                IF (DEC01 .EQ. 0) THEN                     !6
  460             EPAXL = EPAXL + 0.001/FACT
                  INC01 = INC01+1
                  TTYPE = 3
                  RETURN 
                ELSE
  480             EPAXL = EPAXL + 0.00095/FACT
                  INC02 = INC02+1
                  TTYPE = 3
                  RETURN                                      !6C
                ENDIF
         ELSE
C WHEN THE PROGRAM REACH 480 OR 540 THE FIRST TIME, IT MEANS THAT THE 
C STRAIN VALUE HAVE OVERSHOOT THE EQUILIBRIUM POINTS AND IS BACK-
C TRACKING TO THE PREVIOUS EPAXL AND TO PROCEED LATER WITH SMALLER
C INCREMENTAL VALUE FOR EPAXL (LINE 550 & 580) I.E. MORE THAN A TENTH
C OF THE NORMAL INCREMENT AS THE NEXT ATTEMPT TO GAIN EQUILIBRIUM IF
C POSSIBLE OR TO BE CONDEMNED AS UNEQUILIBRIUM AND TRANSFERRED OUT.
C NOTICE THAT INC02>0.
C AFTER THIS, THE INCREMENT WILL HAVE TO BE MADE SMALLER.
C            MST > PECCY
               IF(INC01 .EQ. 0) THEN                           !7
  520             EPAXL = EPAXL - 0.001/FACT
                  DEC01 = DEC01+1
                  TTYPE = 3   ! TTYPE=3 MEANS THE PROBLEM NOT CONVERG YET !
                  RETURN                                   
                ELSE   
  540             EPAXL = EPAXL - 0.00095/FACT
                  INC02 = INC02+1
                  TTYPE = 3
                  RETURN 
                ENDIF                                            !7C
              ENDIF                                            !5C
            ENDIF                                              !4C
          ENDIF                                                !3C
        ELSE
C        THE FOLLOWING IS THE SUBSEQUENT TRIES...         
  550     IF(MST .LT. PECCY) THEN                              !8
  560       IF(INDN .EQ. 1) GO TO 600                          
C           INC02 IS THE INDICATOR THAT THE PROCESS HAVE MISSED THE
C           EQUILIBRIUM STATE IN THE INITIAL STAGE IE. THE
C           DIFFERENCE BETWEEN MST AND PECCY IS REVERSED.
C           IN THE INTERMEDIATE STAGE OF INC02, THE VALUE OF EPAXL IS
C           NOT INCREMENTED BUT INSTEAD REVERSED BACK ALMOST TO THE
C           PREVIOUS VALUE. 
C           AFTER THIS, THE PROCESS GO INTO  THE NEW FINAL
C           STAGE OF EQUILIBRIUM-CHECKING. HERE, THE INCREMENT
C           FOR EPAXL IS SMALLER BECAUSE THIS IS THE SECOND TRY TO
C           GET EQUILIBRIUM. IF VALUE INDN (OR INDM) = 1, THEN THE 
C           DIFFERENCE OF PECCY AND MST HAVE AGAIN REVERSED MEANING THAT
C           THE PROCESS HAVE FOR THE SECOND TIME MISSED THE EQUILIBRIUM
C           STATE. THE PROCESS EXIT TO THE SECOND PART OF CHECK
C           MODULE (DEFLECTION SECTION).
            EPAXL = EPAXL + 0.00005/FACT
            INC03 = INC03+1               
            INDM = 1
            TTYPE = 3
            RETURN 
          ELSEIF (MST .GT. PECCY) THEN
  580       IF (INDM .EQ. 1) GO TO 600                           
            EPAXL = EPAXL - 0.00005/FACT
            INC03 = INC03+1
            INDN = 1
            TTYPE = 3
            RETURN 
          ELSE      
C           THE SECOND OUTPUT...............
            GOTO 620
          ENDIF                                                   !8C
        ENDIF                                                     !2C
      ENDIF                                                       !1C
C          
  600 CONTINUE
      GOTO 750
C      
  620 CONTINUE
  750 CONTINUE
      IF  (Y .LT. 0.000010D0) THEN
  800   Y = Y + 0.000001D0
        TTYPE = 2
      ELSEIF  (Y .LT. 0.000020D0) THEN
  810   IF(MST .LT. 0.0D0) THEN
  815     IF (TIME .LT. FR_RT) THEN
            Y = 0.0000010D0
            TTYPE=1
            RETURN            
          ELSE
            TTYPE=0
            RETURN            
          ENDIF
        ENDIF
  820   Y = Y + 0.000002D0
        TTYPE = 2
      ELSEIF  (Y .LT. 0.00010D0) THEN
  830   Y = Y + 0.000005D0
        TTYPE = 2
      ELSEIF (Y .LT. 0.000200D0) THEN
        Y = Y + 0.00001D0
        TTYPE = 2
  840 ELSEIF (Y .LE. 0.00050D0) THEN
        Y = Y + 0.000025D0
        TTYPE = 2  
  860 ELSEIF (Y .LE. 0.0010D0) THEN
        Y = Y + 0.00005D0
        TTYPE = 2  
  880 ELSEIF (Y .LE. 0.003D0) THEN
        Y = Y + 0.0001D0
        TTYPE = 2  
  900 ELSEIF (Y .LE. 0.010D0) THEN
        Y = Y + 0.00025D0
        TTYPE = 2  
      ELSE
  920   Y = 0.000001D0   
        IF(TIME .LE. FR_RT) TTYPE = 1  
      ENDIF 
 1000 RETURN
      END   

C ************************************************************
C WRITTEN BY ISTAS FAHRURRAZI NUSYIRWAN.
C STRENGTH SUBROUTINES IS DERIVED FROM BADRI PROGRAMS.
C ************************************************************
C 
